plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'jacoco'
}

group = 'com.aaditya'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	// implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.mockito:mockito-core:4.8.1'
	// testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy tasks.named('jacocoTestReport') // Ensure the test report runs after tests
}

jacoco {
	toolVersion = '0.8.5'
}

tasks.named('jacocoTestReport') {
	dependsOn tasks.named('test') // Ensure tests are run before generating the report

	reports {
		xml.required.set(true)
		html.required.set(true)
	}

	sourceSets sourceSets.main

	// Additional configuration to include the tests and coverage data
	classDirectories.setFrom(files(classDirectories.files.collect {
		fileTree(dir: it, exclude: ['com/aaditya/configuration/**']) // Adjust the exclude patterns if needed
	}))
}

tasks.withType(Test) {
	finalizedBy tasks.named('jacocoTestReport') // Ensure the test report runs after tests
}
